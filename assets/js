// Classe principale pour g√©rer la page de connexion

 // Animations fluides au scroll
        window.addEventListener('scroll', function() {
            const header = document.querySelector('.header');
            if (window.scrollY > 100) {
                header.style.background = 'rgba(102, 126, 234, 0.95)';
                header.style.backdropFilter = 'blur(10px)';
            } else {
                header.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
                header.style.backdropFilter = 'none';
            }
        });
class LoginManager {
    constructor() {
        this.currentUserType = 'locataire';
        this.isSubmitting = false;
        this.init();
    }

    // Initialisation de tous les √©v√©nements
    init() {
        this.initUserTypeSelector();
        this.initPasswordToggle();
        this.initFormValidation();
        this.initRememberMe();
        this.initPageAnimations();
        this.updatePlaceholders();
    }

    // Gestion du s√©lecteur de type d'utilisateur
    initUserTypeSelector() {
        const userTypeBtns = document.querySelectorAll('.user-type-btn');
        const userTypeInput = document.getElementById('userTypeInput');

        userTypeBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                // Retirer la classe active de tous les boutons
                userTypeBtns.forEach(b => b.classList.remove('active'));
                
                // Ajouter la classe active au bouton cliqu√©
                btn.classList.add('active');
                
                // Mettre √† jour le type d'utilisateur actuel
                this.currentUserType = btn.dataset.type;
                userTypeInput.value = this.currentUserType;
                
                // Mettre √† jour les placeholders
                this.updatePlaceholders();
                
                // Mettre √† jour le lien d'inscription
                this.updateSignupLink();
            });
        });
    }

    // Gestion de l'affichage/masquage du mot de passe
    initPasswordToggle() {
        const togglePassword = document.getElementById('togglePassword');
        const passwordInput = document.getElementById('password');

        if (togglePassword) {
            togglePassword.addEventListener('click', () => {
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                togglePassword.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
                togglePassword.setAttribute('title', type === 'password' ? 'Afficher le mot de passe' : 'Masquer le mot de passe');
            });
        }
    }

    // Validation et soumission du formulaire
    initFormValidation() {
        const loginForm = document.getElementById('loginForm');
        const submitBtn = document.getElementById('submitBtn');

        loginForm.addEventListener('submit', (e) => {
            if (this.isSubmitting) {
                e.preventDefault();
                return;
            }

            // Validation c√¥t√© client avant soumission
            if (!this.validateForm()) {
                e.preventDefault();
                return;
            }

            // Animation du bouton de soumission
            this.setSubmittingState(true);
        });

        // Validation en temps r√©el
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');

        emailInput.addEventListener('blur', () => this.validateEmail());
        passwordInput.addEventListener('input', () => this.validatePassword());
    }

    // Validation compl√®te du formulaire
    validateForm() {
        const isEmailValid = this.validateEmail();
        const isPasswordValid = this.validatePassword();
        
        return isEmailValid && isPasswordValid;
    }

    // Validation de l'e-mail
    validateEmail() {
        const emailInput = document.getElementById('email');
        const email = emailInput.value.trim();
        
        if (!email) {
            this.showFieldError(emailInput, 'L\'adresse e-mail est requise.');
            return false;
        }
        
        if (!this.isValidEmail(email)) {
            this.showFieldError(emailInput, 'Veuillez entrer une adresse e-mail valide.');
            return false;
        }
        
        this.clearFieldError(emailInput);
        return true;
    }

    // Validation du mot de passe
    validatePassword() {
        const passwordInput = document.getElementById('password');
        const password = passwordInput.value;
        
        if (!password) {
            this.showFieldError(passwordInput, 'Le mot de passe est requis.');
            return false;
        }
        
        if (password.length < 6) {
            this.showFieldError(passwordInput, 'Le mot de passe doit contenir au moins 6 caract√®res.');
            return false;
        }
        
        this.clearFieldError(passwordInput);
        return true;
    }

    // V√©rification du format e-mail
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // Afficher erreur sur un champ
    showFieldError(input, message) {
        input.style.borderColor = '#ef4444';
        
        // Supprimer l'ancienne erreur s'il y en a une
        this.clearFieldError(input);
        
        // Cr√©er et ajouter le message d'erreur
        const errorDiv = document.createElement('div');
        errorDiv.className = 'field-error';
        errorDiv.style.cssText = 'color: #ef4444; font-size: 0.8rem; margin-top: 0.25rem;';
        errorDiv.textContent = message;
        
        input.parentNode.appendChild(errorDiv);
    }

    // Supprimer l'erreur d'un champ
    clearFieldError(input) {
        input.style.borderColor = '#e5e7eb';
        const errorDiv = input.parentNode.querySelector('.field-error');
        if (errorDiv) {
            errorDiv.remove();
        }
    }

    // Gestion de l'√©tat de soumission
    setSubmittingState(isSubmitting) {
        this.isSubmitting = isSubmitting;
        const submitBtn = document.getElementById('submitBtn');
        
        if (isSubmitting) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="loading"></span> Connexion...';
        } else {
            submitBtn.disabled = false;
            submitBtn.innerHTML = 'Se connecter';
        }
    }

    // Gestion de la fonction "Se souvenir de moi"
    initRememberMe() {
        // Charger les donn√©es sauvegard√©es au chargement de la page
        this.loadRememberedUser();
        
        const rememberCheckbox = document.getElementById('remember');
        if (rememberCheckbox) {
            rememberCheckbox.addEventListener('change', () => {
                if (!rememberCheckbox.checked) {
                    this.clearRememberedUser();
                }
            });
        }
    }

    // Charger les donn√©es utilisateur sauvegard√©es
    loadRememberedUser() {
        const savedData = localStorage.getItem('logestay_remember');
        if (savedData) {
            try {
                const data = JSON.parse(savedData);
                document.getElementById('email').value = data.email || '';
                document.getElementById('remember').checked = true;
                
                if (data.userType) {
                    this.setUserType(data.userType);
                }
            } catch (e) {
                console.error('Erreur lors du chargement des donn√©es sauvegard√©es:', e);
            }
        }
    }

    // Supprimer les donn√©es utilisateur sauvegard√©es
    clearRememberedUser() {
        localStorage.removeItem('logestay_remember');
    }

    // D√©finir le type d'utilisateur
    setUserType(userType) {
        const userTypeBtns = document.querySelectorAll('.user-type-btn');
        userTypeBtns.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.type === userType);
        });
        this.currentUserType = userType;
        document.getElementById('userTypeInput').value = userType;
        this.updatePlaceholders();
    }

    // Mettre √† jour les placeholders selon le type d'utilisateur
    updatePlaceholders() {
        const emailInput = document.getElementById('email');
        
        if (this.currentUserType === 'proprietaire') {
            emailInput.placeholder = 'ex: proprietaire@logestay.fr';
        } else {
            emailInput.placeholder = 'ex: locataire@email.fr';
        }
    }

    // Mettre √† jour le lien d'inscription
    updateSignupLink() {
        const signupLink = document.getElementById('signupLink');
        if (signupLink) {
            const baseHref = signupLink.getAttribute('href').split('?')[0];
            signupLink.setAttribute('href', `${baseHref}?type=${this.currentUserType}`);
        }
    }

    // Afficher une alerte
    showAlert(message, type = 'error') {
        const alertContainer = document.getElementById('alertContainer');
        
        // Supprimer les anciennes alertes
        alertContainer.innerHTML = '';
        
        // Cr√©er la nouvelle alerte
        const alert = document.createElement('div');
        alert.className = `alert ${type}`;
        alert.textContent = message;
        
        alertContainer.appendChild(alert);
        
        // Supprimer l'alerte automatiquement apr√®s 5 secondes
        setTimeout(() => {
            if (alert.parentNode) {
                alert.remove();
            }
        }, 5000);
        
        // Faire d√©filer vers l'alerte
        alert.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // Animations de la page
    initPageAnimations() {
        // Animation d'entr√©e
        document.body.style.opacity = '0';
        document.body.style.transform = 'translateY(20px)';
        document.body.style.transition = 'all 0.6s ease';
        
        setTimeout(() => {
            document.body.style.opacity = '1';
            document.body.style.transform = 'translateY(0)';
        }, 100);

        // Animation des champs au focus
        const inputs = document.querySelectorAll('.form-group input');
        inputs.forEach(input => {
            input.addEventListener('focus', function() {
                this.parentNode.classList.add('focused');
            });
            
            input.addEventListener('blur', function() {
                if (!this.value) {
                    this.parentNode.classList.remove('focused');
                }
            });
        });
    }
}

// Gestionnaire pour le lien "Mot de passe oubli√©"
class ForgotPasswordManager {
    static init() {
        const forgotLink = document.querySelector('.forgot-password');
        if (forgotLink && forgotLink.getAttribute('href') === '#') {
            forgotLink.addEventListener('click', this.handleForgotPassword.bind(this));
        }
    }

    static handleForgotPassword(e) {
        e.preventDefault();
        
        const emailInput = document.getElementById('email');
        const email = emailInput.value.trim();
        
        if (!email) {
            loginManager.showAlert('Veuillez entrer votre adresse e-mail d\'abord.', 'error');
            emailInput.focus();
            return;
        }
        
        if (!loginManager.isValidEmail(email)) {
            loginManager.showAlert('Veuillez entrer une adresse e-mail valide.', 'error');
            emailInput.focus();
            return;
        }
        
        // Simulation d'envoi d'e-mail de r√©initialisation
        loginManager.showAlert('Un e-mail de r√©initialisation a √©t√© envoy√© si ce compte existe.', 'success');
    }
}

// Utilitaires divers
class Utils {
    // Sauvegarder les donn√©es utilisateur si "Se souvenir" est coch√©
    static saveUserData() {
        const rememberCheckbox = document.getElementById('remember');
        const emailInput = document.getElementById('email');
        
        if (rememberCheckbox.checked && emailInput.value) {
            const data = {
                email: emailInput.value,
                userType: loginManager.currentUserType,
                timestamp: Date.now()
            };
            localStorage.setItem('logestay_remember', JSON.stringify(data));
        }
    }
}
